#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//练习内容：表示一维数组在内存中的存储规律

int main()
{
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	int arr2[][5] = { { 1, 2, 3, 4, 5 }, { 6, 7, 8, 9, 10 } };
	int sz = sizeof(arr) / sizeof(arr[0]);	
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf("一维数组:");
		printf("&arr[%d]=%p\n", i, arr[i]);//一维数组
	}
	int k = 0;
	int sz2 = sizeof(arr2) / sizeof(arr2[0][0]);
	for (k= 0; k < sz2; k++)
	{
		int j = 0;
		for (j = 0; j < sz2; j++)
		{
			printf("二维数组:");
			printf("&arr2[%d][%d]=%p\n", k, j, &arr2[k][j]);// 二维数组
		}
	}
	return 0;
}


//其结果如下：
//一维数组&arr[0]=00000001 //一维数组&arr[1]=00000002 //一维数组&arr[2]=00000003 //一维数组&arr[3]=00000004 //一维数组&arr[4]=00000005
//一维数组&arr[5]=00000006 //一维数组&arr[6]=00000007 //一维数组&arr[7]=00000008 //一维数组&arr[8]=00000009 //一维数组&arr[9]=0000000A
//二维数组:&arr2[0][0]=00EFF6CC
//二维数组:&arr2[0][1]=00EFF6D0
//二维数组:&arr2[0][2]=00EFF6D4
//二维数组:&arr2[0][3]=00EFF6D8
//二维数组:&arr2[0][4]=00EFF6DC
//二维数组:&arr2[0][5]=00EFF6E0
//二维数组:&arr2[0][6]=00EFF6E4
//二维数组:&arr2[0][7]=00EFF6E8
//二维数组:&arr2[0][8]=00EFF6EC
//二维数组:&arr2[0][9]=00EFF6F0
//二维数组:&arr2[1][0]=00EFF6E0
//二维数组:&arr2[1][1]=00EFF6E4
//二维数组:&arr2[1][2]=00EFF6E8
//二维数组:&arr2[1][3]=00EFF6EC
//二维数组:&arr2[1][4]=00EFF6F0
//二维数组:&arr2[1][5]=00EFF6F4
//二维数组:&arr2[1][6]=00EFF6F8
//二维数组:&arr2[1][7]=00EFF6FC
//二维数组:&arr2[1][8]=00EFF700
//二维数组:&arr2[1][9]=00EFF704
//二维数组:&arr2[2][0]=00EFF6F4
//...(以下不作描述)
//说明多维数组在内存中是连续分布的
//2023.9.9



